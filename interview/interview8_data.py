'''
列举常见的关系型数据库和非关系型数据型数据库？
关系型数据库：
Oracle、DB2、Microsoft SQL Server、Microsoft Access、MySQL
非关系型数据库：
NoSql、Cloudant、MongoDb、redis、HBase
关系型数据库的特性
　　1、关系型数据库，是指采用了关系模型来组织数据的数据库；
　　2、关系型数据库的最大特点就是事务的一致性；
　　3、简单来说，关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织。
关系型数据库的优点
　　1、容易理解：二维表结构是非常贴近逻辑世界一个概念，关系模型相对网状、层次等其他模型来说更容易理解；
　　2、使用方便：通用的SQL语言使得操作关系型数据库非常方便；
　　3、易于维护：丰富的完整性(实体完整性、参照完整性和用户定义的完整性)大大减低了数据冗余和数据不一致的概率；
　　4、支持SQL，可用于复杂的查询。
关系型数据库的缺点
　　1、为了维护一致性所付出的巨大代价就是其读写性能比较差；
　　2、固定的表结构；
　　3、高并发读写需求；
　　4、海量数据的高效率读写；
非关系型数据库
非关系型数据库的特性
　　1、使用键值对存储数据；
　　2、分布式；
　　3、一般不支持ACID特性；
　　4、非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合。
非关系型数据库的优点
　　1、无需经过sql层的解析，读写性能很高；
　　2、基于键值对，数据没有耦合性，容易扩展；
　　3、存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，文档形式、图片形式等等，而关系型数据库则只支持基础类型。
非关系型数据库的缺点
　　 1、不提供sql支持，学习和使用成本较高；
　　 2、无事务处理，附加功能bi和报表等支持也不好；


MySQL常见的数据库引擎？
ISAM：ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错；
MyISAM：除了提供ISAM里所没有的索引和字段管理的大量功能，MyISAM还使用一种表格锁定的机制，来优化多个并发的读写操作，
        其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。
InnoDB：在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MyISAM数据库引擎不支持事务处理（transaction process）也不支持外来键。
        尽管要比ISAM和 MyISAM引擎慢很多，但是InnoDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。
MEMORY: 服务器需要有足够的内存来维持MEMORY存储引擎的表的使用。如果不需要了，可以释放内存，甚至删除不需要的表。
        MEMORY用到的很少，因为它是把数据存到内存中，如果内存出现异常就会影响数据。如果重启或者关机，所有数据都会消失。


简述数据库的三大范式
第一范式（1NF）:原子性 字段不可再分,否则就不是关系数据库;
第二范式（2NF）:唯一性 一个表只说明一个事物;
第三范式（3NF）:每列都与主键有直接关系，不存在传递依赖;
PS：第二范式要遵循第一范式，第三范式要遵循第二范式。

简单来说：
1NF:列表字段不可分;
2NF:有主键且非主键依赖主键；
3NF:非主键字段不能相互依赖;

不符合第一范式的例子(关系数据库中create不出这样的表)：
表:姓名，性别，电话
问题：若某个人有两个电话，家庭电话和手机，这样则不符合第一范式。
解决：把电话列分成两个列即可。

不符合第二范式的例子:
表:学号, 姓名, 年龄, 课程名称, 成绩, 学分;
这个表明显说明了两个事务:学生信息, 课程信息，不符合第二范式。
存在问题:数据冗余，每条记录都含有相同信息。
解决：分成学生表和课程表分别存储即可。

不符合第三范式的例子:
学号, 姓名, 年龄, 所在学院, 学院联系电话，关键字为单一关键字"学号";
存在依赖传递: (学号) → (所在学院) → (学院地点, 学院电话)
存在问题:
数据冗余:有重复值；
解决：分成学生表，学院表即可。


什么是事务？MySQL如何支持事务？
事务由一个或多个sql语句组成一个整体，如果所有的语句执行成功那么修改将会全部生效，如一条sql语句将销量+1，下一条再+1，
倘若第二条失败，那么销量将撤销第一条sql语句的+1操作，只有在该事务中所有的语句都执行成功才会将修改加入到数据库中。

事务的特性
1. 原子性（Atomicity） 
　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，
    如果操作失败则不能对数据库有任何影响。
2. 一致性（Consistency） 
　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。
    拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，
    事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。
3.隔离性（Isolation） 
　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。
　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，
  要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。
4.持久性（Durability） 
　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。
        Mysql中会保存有相应的操作日志，即使遭遇故障依然能够通过日志恢复最后一次更新。
　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，
        当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，
        也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。


